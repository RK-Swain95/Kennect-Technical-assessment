1)fibonacciFinder50

public class Main
{
     public static long fibonacciFinder50(int n)
    {
        // 1st number is 0
        //2nd number is 1
        //next is the sum of 1st and 2nd
        long first = 0, second = 1, next;
        //base case
        if (n == 0){
           return first; 
        }
         //i start from 2 because 1st and 2nd number we already define
         //i< n because we are returning second 
        for (int i = 2; i < n; i++)
        {
            next = first + second;
            first = second;
            second = next;
        }
        return second;
    }
	public static void main(String[] args) {
		int n = 50;
        System.out.println(fibonacciFinder50(n));
	}
}

2)String Reverse

public class Main
{
    
    public static String reverse(String str){
        int count=0;
        String ans="";
        char spe='\0';
         
         // finding the word in which punctuation is present by maintaining count where we were finding the spaces to handle and
         // also find the punctuation Character and storing it in spe.
        for( int i=0;i<str.length();i++){
            if(str.charAt(i)==' '){
                count++;
                
            }else if(!(str.charAt(i)>='a' && str.charAt(i)<='z') && !(str.charAt(i)>='A' && str.charAt(i)<='Z') ){
                spe=str.charAt(i);
                break;
            }
        }
        
        // to maintain substring
        int end=str.length();
        
        // if punctuation present in the last of the string then we are making end to length -1. 
        
        if(str.charAt(str.length()-1)==spe){
                end=str.length()-1;
            }
       
        for(int i=str.length()-1;i>=0;i--){
            
        // here we are checking sapce and punctuation 
        //because if my punctuation will come in the middle we will handle by this condition  
            if(str.charAt(i)==' ' &&str.charAt(i-1)==spe ){
        //if count 0 then we will add punctuation in the reverse string
                if(count==0){
                    ans+=str.substring(i+1,end)+spe+" ";
                     end=i-1;  
                }else{
                   ans+=str.substring(i+1,end)+" ";
                     end=i-1; 
                }
                count--;
                    
        // here we are checking space only
            }else if(str.charAt(i)==' '){
        //if count 0 then we will add punctuation in the reverse string
                if(count==0){
                    ans+=str.substring(i+1,end)+spe+" ";
                    end=i; 
                }else{
                    ans+=str.substring(i+1,end)+" "; 
                end=i;
                
                }
               count--; 
            }
        }
        // it is for the case where punctuation will be in the end
        if(count<0){
             ans+=str.substring(0,end);
        }
        //otherwise it is for the normal case
        else{
            ans+=str.substring(0,end)+spe;
        }
        return ans;
    }
	public static void main(String[] args) {
		String str="with you, be may the fourth";
		System.out.print(reverse(str));
		
	}
}

3)Right Roteted Array

import java.util.*;
public class Main
{
     static int[]  rightRoteted(int[] arr,int k){
        int n=arr.length;
        
        //if length is 0
        if(arr.length==0){
            return arr;
        }
        //if k greater than n then it is similar to k-n because if n rotation we move to same array
         while (k > n) {
            k = k - n;
        }
 
        // A temp array of size n-k to store non rotating elements
        int temp[] = new int[n - k];
 
        // copying the non rotating elements in array temp
        for (int i = 0; i < n - k; i++)
            temp[i] = arr[i];
 
        // transfor the rotating elements to arr from index 0 to k
        for (int i = n - k; i < n; i++) {
            arr[i - n + k] = arr[i];
        }
 
        // Now transfor the temp array element in original array
        for (int i = 0; i < n - k; i++) {
            arr[i + k] = temp[i];
        }
        
        return arr;
    }
        
    
    
	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		int length=s.nextInt();
		int [] arr=new int [length];
		//inserting the numbers in to the array
		for(int i=0;i<length;i++){
		    arr[i]=s.nextInt();
		}
		//number of times to rotate the array
		int k=s.nextInt();
		//calling the function
		int [] ans=rightRoteted(arr,k);
		
		//printing the array
		for(int i=0;i<length;i++){
		    System.out.print(ans[i]+" ");
		}
	}
}

4)Smallest +ve Integer

//[1,3,6,10,11,15]
//Concept:-
//step=1->our ans=1 start from 1 because smallest +ve integer.
//step=2->we will pick up the 1st element of array and check if it is smaller than or equal to ans .
//step=3->if TRUE there may be a chance we get that value from the subset of array.then we will adding up the value to the ans.
//step=4->we will traverse until the array element will not go greater than the ans and come out of the loop and return the ans.
import java.util.*;
public class Main
{
    public static int smallestPositiveInt(int [] arr){
        //sorting the array
        Arrays.sort(arr);
        
        int n=arr.length;
        //step 1
        int ans=1;
        
        for(int i: arr){
            //step 2
            if(i<=ans){
                //step 3
                ans=ans+i;
            }
            //step 4
            else{
                break;
            }
        }
        return ans;
    }
	public static void main(String[] args) {
			Scanner s=new Scanner(System.in);
		int length=s.nextInt();
		int [] arr=new int [length];
		//inserting the numbers in to the array
		for(int i=0;i<length;i++){
		    arr[i]=s.nextInt();
		}
		
			int ans=smallestPositiveInt(arr);
			System.out.print("Smallest Positive Integer"+" " +ans);
	}
}
